/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode* merge(struct ListNode* a, struct ListNode* b){
    struct ListNode* r=(struct ListNode*)malloc(sizeof(struct ListNode));;
    struct ListNode* h=r;
    /*while(a!=NULL&b!=NULL){
        if(a->val<=b->val){
            r->next=(struct ListNode*)malloc(sizeof(struct ListNode));
            r=r->next;
            r->val=a->val;
            a=a->next;
        } 
        else{
            r->next=(struct ListNode*)malloc(sizeof(struct ListNode));
            r=r->next;
            r=b;
            b=b->next;
        }
        
    }
    while(a!=NULL){
        r->next=(struct ListNode*)malloc(sizeof(struct ListNode));
        r=r->next;
        r=a;
        a=a->next;
        
    }
    while(b!=NULL){
        r->next=(struct ListNode*)malloc(sizeof(struct ListNode));
        r=r->next;
        r=b;
        b=b->next;
        
    }*/
    return h->next;
}
struct ListNode* sortList(struct ListNode* head){
    if(head==NULL) return NULL;
    if(head->next==NULL) return head;
    struct ListNode* s=head;
    struct ListNode* f=head;
    struct ListNode* mid;
    while(f->next!=NULL&&f->next->next!=NULL){
        mid=s;
        s=s->next;
        f=f->next->next;
    }
    mid->next=NULL;
    struct ListNode* a=sortList(head);
    struct ListNode* b=sortList(s);
    return merge(a,b);
}
